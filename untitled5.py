# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pQp-25iX_JBbWgPFwh3esxhJ9Y9Z0wAJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import logging
import time
import os
import warnings
warnings.filterwarnings('ignore')
from sqlalchemy import create_engine
import zipfile

# setup logger
logger=logging.getLogger('__name__')
logger.setLevel(logging.INFO)

# create handler
if logger.hasHandlers():
  logger.handlers.clear()
file_handler=logging.FileHandler("log_file.log",mode="w")
file_formatting=logging.Formatter("%(asctime)s - %(levelname)s - %(message)s",datefmt='%Y-%m-%d %H:%M:%S')
file_handler.setFormatter(file_formatting)
logger.addHandler(file_handler)
logging.info("----------------------------------------------------logging start--------------------------------------------------------------------------")

with open("log_file.log", "r") as file:
  print(file.read())

engine=create_engine('sqlite:///sales_data.db')
logger.info("----------------connection establish successfully----------------------")

zip_path = "/content/salesforcourse-4fe2kehu.csv.zip"

#  Extract CSV file from ZIP
import zipfile
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall("/content/")
    extracted_files = zip_ref.namelist()
    csv_file = [f for f in extracted_files if f.endswith(".csv")][0]

logger.info(f"Extracted file: {csv_file}")

#  Load dataset
csv_path = f"/content/{csv_file}"
df = pd.read_csv(csv_path)
logger.info(f"Loaded dataset with shape {df.shape}")

#  Upload dataframe to the database
table_name = "sales_data"
df.to_sql(table_name, engine, index=False, if_exists='replace')

logger.info(f"Data successfully uploaded to database table: {table_name}")

print(" Data uploaded successfully!")

df=pd.read_sql("select * from sales_data ;" , engine)
df

df=pd.read_sql("select `Product Category` ,sum(Revenue) as total_sales from sales_data group by `Product Category` ;" , engine)
df

df=pd.read_sql("select sum(Quantity*`Unit cost`) as Total_revenue from sales_data ;" , engine)
df

df=pd.read_sql("select * from sales_data where `Product Category` IS NULL ;" , engine)
df

df=pd.read_sql("select distinct(year) from sales_data ;" , engine)
df

df=pd.read_sql("select distinct(month),sum(Quantity*`Unit cost`) as Total_revenue from sales_data group by month ;" , engine)
df

df=pd.read_sql("select * from sales_data where `Customer Age` < 1 ;" , engine)
df

p=csv_path

data=pd.read_csv(p)

data

data.isnull().sum()

from sqlalchemy import text

# Create connection
with engine.connect() as connection:
    connection.execute(text("DELETE FROM sales_data WHERE `index` = 34866;"))
    connection.commit()   # Make sure to commit the transaction

print("âœ… Row deleted successfully!")

df_check = pd.read_sql("SELECT * FROM sales_data WHERE `index` = 34866;", engine)
print(df_check)

data['Product Category'].value_counts().plot(
    kind='pie',
    autopct='%1.1f%%',       # show percentages
    startangle=90,           # start from 12 o'clock
    figsize=(8,8),           # make it larger
    shadow=True,             # add shadow for clarity
    cmap='tab20'             # gives each slice a distinct color
)

plt.title("Number of Product Categories", fontsize=14)
plt.ylabel("")  # remove y-label (not needed in pie chart)
plt.show()

data['Product Category'].value_counts().plot(kind='bar', color='skyblue', edgecolor='black')
plt.title("Number of Product Category")
plt.xlabel("Product Category")
plt.ylabel("Count")
plt.show()

data.columns

data['Customer Age'].unique()

print("Mean of the age : " ,data['Customer Age'].mean())
print()
print("Median of the age : " ,data['Customer Age'].median())
print()
print("Mode of the age :",data['Customer Age'].mode()[0])

plt.figure(figsize=(8,5))
sns.barplot(x='Product Category', y='Revenue', data=data, estimator='sum', palette='viridis')
plt.title("Total Revenue by Product Category")
plt.xlabel("Product Category")
plt.ylabel("Total Revenue")
plt.xticks(rotation=45)
plt.show()

counts = data['Sub Category'].value_counts()
plt.figure(figsize=(30,35))
wedges, texts, autotexs = plt.pie(
    counts,
    labels=counts.index,
    autopct=lambda p: f'{int(p * counts.sum() / 100)}',
    startangle=90,
    pctdistance=0.85,
    colors=plt.cm.tab20.colors
)
centre_circle = plt.Circle((0,0), 0.70, fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
plt.title("Number of Sub Categories", fontsize=14)
plt.tight_layout()
plt.show()

plt.figure(figsize=(6,5))
sns.barplot(x='Customer Gender', y='Revenue', data=data, estimator='sum', palette='coolwarm')
plt.title("Revenue by Customer Gender")
plt.xlabel("Gender")
plt.ylabel("Total Revenue")
plt.show()

plt.figure(figsize=(20,10))
sns.lineplot(x='Month', y='Revenue', data=data, estimator='sum', marker='o')
plt.title("Monthly Revenue Trend")
plt.xlabel("Month")
plt.ylabel("Total Revenue")
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()

plt.figure(figsize=(10,5))
top_states = data.groupby('State')['Revenue'].sum().nlargest(10).reset_index()
sns.barplot(x='State', y='Revenue', data=top_states, palette='mako')
plt.title("Top 10 States by Revenue")
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(6,5))
sns.scatterplot(x='Quantity', y='Revenue', data=data, alpha=0.6, color='orange')
plt.title("Quantity vs Revenue")
plt.xlabel("Quantity Sold")
plt.ylabel("Revenue")
plt.show()

plt.figure(figsize=(8,5))
sns.histplot(data['Customer Age'], bins=20, kde=True, color='teal')
plt.title("Distribution of Customer Age")
plt.xlabel("Customer Age")
plt.ylabel("Frequency")
plt.show()

